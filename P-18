class MergeSort:
    def __init__(self, list1, list2):
        self.list1 = list1
        self.list2 = list2
        self.merged_list = []

    def merge(self, left, right):
        i = j = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                self.merged_list.append(left[i])
                i += 1
            else:
                self.merged_list.append(right[j])
                j += 1
        while i < len(left):
            self.merged_list.append(left[i])
            i += 1
        while j < len(right):
            self.merged_list.append(right[j])
            j += 1

    def merge_sort(self, list_to_sort):
        if len(list_to_sort) <= 1:
            return list_to_sort
        middle = len(list_to_sort) // 2
        left = self.merge_sort(list_to_sort[:middle])
        right = self.merge_sort(list_to_sort[middle:])
        return self.merge(left, right)

    def sort(self):
        self.merged_list = self.merge_sort(self.list1 + self.list2)
        return self.merged_list

# Example usage:
mylist1 = list(map(int, input("Enter the elements of the first list separated by spaces: ").split()))
mylist2 = list(map(int, input("Enter the elements of the second list separated by spaces: ").split()))

sorter = MergeSort(mylist1, mylist2)

print("List before sorting ")
print(mylist1)
print(mylist2)

sorted_list = sorter.sort()

print("List after sorting")
print(sorted_list)
