class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)
        else:
            self._insert(data, self.root)

    def _insert(self, data, node):
        if data < node.data:
            if node.left is None:
                node.left = Node(data)
            else:
                self._insert(data, node.left)
        else:
            if node.right is None:
                node.right = Node(data)
            else:
                self._insert(data, node.right)

    def preorder(self, node):
        if node is not None:
            print(node.data, end=" ")
            self.preorder(node.left)
            self.preorder(node.right)

    def inorder(self, node):
        if node is not None:
            self.inorder(node.left)
            print(node.data, end=" ")
            self.inorder(node.right)

    def postorder(self, node):
        if node is not None:
            self.postorder(node.left)
            self.postorder(node.right)
            print(node.data, end=" ")

    def delete(self, data):
        self.root = self._delete(data, self.root)

    def _delete(self, data, node):
        if node is None:
            return node
        if data < node.data:
            node.left = self._delete(data, node.left)
        elif data > node.data:
            node.right = self._delete(data, node.right)
        else:
            if node.left is None:
                temp = node.right
                node = None
                return temp
            elif node.right is None:
                temp = node.left
                node = None
                return temp
            temp = self.get_min_value_node(node.right)
            node.data = temp.data
            node.right = self._delete(temp.data, node.right)
        return node

    def get_min_value_node(self, node):
        current = node
        while current.left is not None:
            current = current.left
        return current

if __name__ == '__main__':
    bst = BST()
    while True:
        print("\nMenu:")
        print("1. Create BST")
        print("2. Insert element")
        print("3. Preorder traversal")
        print("4. Inorder traversal")
        print("5. Postorder traversal")
        print("6. Delete element")
        print("7. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            data = int(input("Enter data for BST: "))
            bst.insert(data)
            print("BST created.")
        elif choice == '2':
            data = int(input("Enter data to insert: "))
            bst.insert(data)
            print("Data inserted successfully.")
        elif choice == '3':
            print("Preorder traversal: ", end="")
            bst.preorder(bst.root)
            print()
        elif choice == '4':
            print("Inorder traversal: ", end="")
            bst.inorder(bst.root)
            print()
        elif choice == '5':
            print("Postorder traversal: ", end="")
            bst.postorder(bst.root)
            print()
        elif choice == '6':
            data = int(input("Enter data to delete: "))
            bst.delete(data)
            print("Data deleted successfully.")
        elif choice == '7':
            break
        else:
            print("Invalid choice.")
